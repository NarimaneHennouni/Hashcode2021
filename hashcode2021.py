# -*- coding: utf-8 -*-
"""Hashcode2021

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18WzuMQfN-IPINm_mcIgKLTva1l0IKr_p
"""

from dataclasses import dataclass
import io

@dataclass
class Street:
  start:int
  end:int
  name:str
  length:int
  pass 

@dataclass 
class Car:
  num_street:int
  streets: [str]
  after_end:bool



with io.open("a.txt") as f: 
  sim_time, num_intersection, num_streets, num_cars, bonus = f.readline()[:-1].split(" ")

  street_dict = dict()

  streets = []
  for i in range(int(num_streets)): 
   start, end, name, length = f.readline()[:-1].split(" ")
   street = Street(int(start),int(end),name,int(length))

   streets.append(street)
   street_dict[name] = street


  cars = []
  for i in range(int(num_cars)): 
   line  = f.readline()[:-1].split(" ")
   num_streets = line[0]
   streets_name = line[1:]

   length = 0

   for s in streets_name: 
      length += street_dict[s].length
  
   cars.append(Car(int(num_streets),streets_name,length > int(sim_time)))

# what are the traffic lights ? 

@dataclass
class Intersection: 
  id:str
  num_streets: int
  streets_names:[str]


intersections = []
for i in range(int(num_intersection)):
  filtered = list(filter(lambda s: s.end == i,streets)) # streets the belongs to the intersection I 
  names = list(map(lambda s: s.name, filtered)) # only name

  intersections.append(Intersection(id=i,num_streets=len(names),streets_names=names))

sub_num_intersection = int(num_intersection)

dict_str = dict()

for s in streets:
  dict_str[s.name] = 0

  for c in cars:
    if s.name in c.streets:
          dict_str[s.name] += 1

x = dict()
for i in range(sub_num_intersection):
  intersection = intersections[i]
  score = sum([dict_str[s] for s in intersection.streets_names])
  x[intersection.id] = score


x = {k: v for k, v in sorted(x.items(), key=lambda item: item[1])}

import random 



with open("a_out.txt", "w") as wf:
  wf.write(str(sub_num_intersection) + "\n")

  for i in range(sub_num_intersection): 
    intersection = intersections[i]
    
    wf.write(str(intersection.id) + "\n")
    wf.write(str(intersection.num_streets) + "\n")

    for street in intersection.streets_names: 
        wf.write(street +" "+ str(dict_str[street] // intersection.num_streets + 1)+"\n")

